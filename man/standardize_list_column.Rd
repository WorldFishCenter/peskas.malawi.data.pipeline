% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/preprocessing.R
\name{standardize_list_column}
\alias{standardize_list_column}
\title{Standardize a List-Column in a Data Frame}
\usage{
standardize_list_column(data, column_name)
}
\arguments{
\item{data}{A data frame containing the list-column to standardize.}

\item{column_name}{A string specifying the name of the list-column to standardize.}
}
\value{
A data frame with the specified list-column standardized, ready for unnesting.
}
\description{
This function standardizes a specified list-column in a data frame, ensuring that all elements within the column have a consistent structure. It is particularly useful when dealing with data frames containing nested lists or data frames that may have inconsistent structures due to data serialization or deserialization processes.
}
\details{
The function iterates over each element of the specified list-column and standardizes its structure as follows:
\itemize{
\item If an element is a data frame, it remains unchanged.
\item If an element is an empty list (i.e., \code{list()}), it is converted to \code{NULL}.
\item If an element is a list containing a single data frame, it extracts and returns that data frame.
\item If an element is a list of multiple data frames, it combines them into a single data frame using \code{dplyr::bind_rows()}.
\item If an element is \code{NULL}, it remains \code{NULL}.
\item Any other types of elements are set to \code{NULL}.
}

This standardization ensures that the list-column can be unnested without errors, facilitating consistent data processing and analysis.
}
\examples{
\dontrun{
# Load necessary libraries
library(dplyr)
library(tidyr)

# Sample data frame with inconsistent 'gillnets' column
core_data <- data.frame(
  submission_id = c(1, 2, 3),
  gillnets = list(
    data.frame(gillnet_length = 100, gillnet_mesh = 50), # Data frame
    list(data.frame(gillnet_length = 150, gillnet_mesh = 60)), # List containing a data frame
    list() # Empty list
  ),
  stringsAsFactors = FALSE
)

# Apply the function to standardize the 'gillnets' column
core_data <- standardize_list_column(core_data, "gillnets")

# Unnest the 'gillnets' column
gillnets_data <- core_data \%>\%
  select(submission_id, gillnets) \%>\%
  unnest(gillnets, keep_empty = TRUE)

# View the result
print(gillnets_data)
}
}
\seealso{
\code{\link[dplyr]{bind_rows}}, \code{\link[tidyr]{unnest}}
}
\keyword{preprocessing}
